<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on </title>
    <link>/categories/algorithms/</link>
    <description>Recent content in Algorithms on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>cipherchallenge@um6p.ma (Cipher Challenge 2025 Cryptography Edition)</managingEditor>
    <webMaster>cipherchallenge@um6p.ma (Cipher Challenge 2025 Cryptography Edition)</webMaster>
    <lastBuildDate>Mon, 03 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Divide and conquer! 💪</title>
      <link>/challenges/multiplication-complexity/</link>
      <pubDate>Mon, 03 Mar 2025 00:00:00 +0000</pubDate><author>cipherchallenge@um6p.ma (Cipher Challenge 2025 Cryptography Edition)</author>
      <guid>/challenges/multiplication-complexity/</guid>
      <description>&lt;p&gt;The time complexity describes the amount of computer time it takes to run an algorithm. It is estimated by counting the number of elementary operations performed by the algorithm. Since an algorithm&amp;rsquo;s running time may vary among different inputs of the same size, one commonly considers the worst-case time. Algorithmic complexities are classified according to the type of function appearing in the big O notation. Here are some examples:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;em&gt;Name&lt;/em&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;em&gt;Time complexity&lt;/em&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Constant time&lt;/td&gt;&#xA;          &lt;td&gt;$\mathcal{O}(1)       $&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Logarithmic time&lt;/td&gt;&#xA;          &lt;td&gt;$\mathcal{O}(\log n)  $&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Linear time&lt;/td&gt;&#xA;          &lt;td&gt;$\mathcal{O}(n)       $&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Linearithmic time&lt;/td&gt;&#xA;          &lt;td&gt;$\mathcal{O}(n \log n)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Quadratic time&lt;/td&gt;&#xA;          &lt;td&gt;$\mathcal{O}(n^2)     $&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Polynomial time&lt;/td&gt;&#xA;          &lt;td&gt;$2^{\mathcal{O}(\log n)} = poly(n)$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Exponential time&lt;/td&gt;&#xA;          &lt;td&gt;$2^{poly(n)}$&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;multiplication-algorithms&#34;&gt;Multiplication algorithms&lt;/h2&gt;&#xA;&lt;h3 id=&#34;schoolbook-multiplication&#34;&gt;Schoolbook multiplication&lt;/h3&gt;&#xA;&lt;p&gt;Consider this example $102 \times 257$:&lt;/p&gt;</description>
    </item>
    <item>
      <title>One step at a time! 🪜</title>
      <link>/challenges/scalar-multiplication-complexity/</link>
      <pubDate>Sun, 02 Mar 2025 00:00:00 +0000</pubDate><author>cipherchallenge@um6p.ma (Cipher Challenge 2025 Cryptography Edition)</author>
      <guid>/challenges/scalar-multiplication-complexity/</guid>
      <description>&lt;h2 id=&#34;scalar-multiplication&#34;&gt;Scalar multiplication&lt;/h2&gt;&#xA;&lt;p&gt;Let $\mathbb{G}$ be a commutative group under the addition law ($+$) and let $G&#xA;\in \mathbb{G}$ be its generator.  The group has an order $p$. We define a&#xA;scalar multiplication $k \cdot G$ as $\underbrace{G+&amp;hellip;+G}_\text{$k$~times}$.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Consider $105 \cdot G$. How many additions does it involve?&lt;/li&gt;&#xA;&lt;li&gt;Now consider the binary decomposition of $105 = 2^6 + 2^5 + 2^3 + 2^0$. It can be written as&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;$105 = ((((((((((1 · 2 + 1) · 2) + 0) · 2) + 1) · 2) + 0) · 2) + 0) · 2) + 1$.&#xA;Given that a doubling (multiplication by 2) has the same cost as an addition, how many additions $105 \cdot G$ involves?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Witness or liar? 🤥</title>
      <link>/challenges/primality-testing/</link>
      <pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate><author>cipherchallenge@um6p.ma (Cipher Challenge 2025 Cryptography Edition)</author>
      <guid>/challenges/primality-testing/</guid>
      <description>&lt;p&gt;Primes are of great theoretical and practical value in cryptography. A&#xA;primality test is an algorithm for determining whether an input number is&#xA;prime or not.&lt;/p&gt;&#xA;&lt;h3 id=&#34;naive-but-deterministic&#34;&gt;Naive but deterministic&lt;/h3&gt;&#xA;&lt;p&gt;The simplest primality test is trial division: given an input number,&#xA;$n$, check whether it is divisible by any prime number between 2 and $\sqrt{n}$. If&#xA;so, then $n$ is composite. Otherwise, it is prime.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;The prime number theorem&lt;/strong&gt;: the distribution of primes is $π(n) \sim n/\log(n)$&#xA;where $π(n)$ is the prime-counting function (the number of primes less than or&#xA;equal to $n$) and $\log(n)$ is the natural logarithm of $n$.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mashi 3la Raibi, 3la Jamila! 💓</title>
      <link>/challenges/polynomial-interpolation/</link>
      <pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><author>cipherchallenge@um6p.ma (Cipher Challenge 2025 Cryptography Edition)</author>
      <guid>/challenges/polynomial-interpolation/</guid>
      <description>&lt;p&gt;Polynomials are functions of the form:&#xA;$$ f(x) = a_0 + a_1 x + \dots + a_n x_n $$&#xA;where $n$ is any non-negative integer and $a_0,\dots,a_n$ any fixed numbers&#xA;with $a_n \ne 0$. We call:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$n$ the polynomial degree,&lt;/li&gt;&#xA;&lt;li&gt;$a_0,\dots,a_n$ the polynomial coefficients and&lt;/li&gt;&#xA;&lt;li&gt;$a_0$ the polynomial constant term.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;polynomial-interpolation&#34;&gt;Polynomial Interpolation&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Suppose that $f(x)$ is a polynomial of degree 2, i.e. of the form $f(x) =&#xA;a_0 + a_1 x + a_2 x^2$. Let $f(1)=2$, $f(2)=5$, and $f(4)=2$. Find $f(x)$.&lt;/li&gt;&#xA;&lt;li&gt;Can you quickly write down a non-zero polynomial that vanishes at 1, 3 and 100?&lt;/li&gt;&#xA;&lt;li&gt;Same problem as before, but now with the two extra conditions: $f$ must have&#xA;degree $\leq 3$ and also $f(50)=1$.&lt;/li&gt;&#xA;&lt;li&gt;Same problem as before, but now with the following conditions: $f$ must have&#xA;degree $\leq 3$, $f(50)=1$ and $f(4)=3$.&lt;/li&gt;&#xA;&lt;li&gt;Now suppose that we have $n+1$ points $(x_0,y_0), (x_1,y_1), \dots,&#xA;(x_n,y_n)$ such that $f(x_i)=y_i$ for $0 \leq i \leq n$. Can you generalize&#xA;the above approach to find $f(x)$?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;secret-sharing&#34;&gt;Secret Sharing&lt;/h2&gt;&#xA;&lt;p&gt;Raibi Jamila, often referred to simply as &amp;ldquo;Raibi,&amp;rdquo; is a beloved yogurt-based&#xA;drink that has become a staple in Moroccan culture. Many have tried to&#xA;replicate the drink, but none have succeeded in capturing its unique flavor.&#xA;The secret recipe for Raibi is known only to a few select individuals, who have&#xA;sworn to keep it a secret. To prevent these individuals from sharing the secret&#xA;and to ensure it is never lost, we are going to construct a scheme that allows&#xA;the secret to be shared among a group of people in such a way that the secret&#xA;cannot be revealed unless a minimum number of the group&amp;rsquo;s members act together&#xA;to pool their knowledge.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
